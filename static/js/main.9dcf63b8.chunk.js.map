{"version":3,"sources":["App.js","components/Map.js","components/Sidebar.js","registerServiceWorker.js","index.js"],"names":["marker","popup","latLng","map","venueId","Map","ref","el","mapContainer","role","Component","clientId","clientSecret","api","Sidebar","state","query","results","venues","markers","error","newSearch","setState","getVenueDetails","venue","id","fetch","then","res","json","data","meta","code","response","bestPhoto","prefix","suffix","width","height","props","initializeMarkers","catch","err","console","log","this","showVenues","showMarkers","venueMatch","RegExp","escapeRegExp","filter","test","name","markerMatch","_element","classList","remove","add","forEach","sort","sortBy","className","type","placeholder","aria-label","value","onChange","event","target","key","tabIndex","alt","src","categories","location","formattedAddress","href","selectedMarker","mapboxgl","accessToken","App","pizzaPlaces","pizzaImport","initializeMap","container","style","center","zoom","on","alert","Popup","offset","replace","lng","lat","setHTML","createMarker","Marker","color","setLngLat","setPopup","addTo","getElement","addEventListener","togglePopup","animateMarker","setAttribute","currentTarget","push","splice","toggle","openPopup","updateMarkers","clearMarkers","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9dcf63b8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Map from './components/Map.js';\nimport Sidebar from './components/Sidebar.js';\nimport './App.css';\nimport pizzaImport from './data/pizza.json';\nimport mapboxgl from 'mapbox-gl/dist/mapbox-gl';\n\n\nlet marker, \n    popup, \n    latLng,  \n    map, \n    venueId,\n    selectedMarker = [];\n\nlet markerArr = [];\n\nmapboxgl.accessToken ='pk.eyJ1IjoiYXNobGVpZ2hjMjA3IiwiYSI6ImNqa3dod254cjByOGUzcHBkbmpmendyN2EifQ.RzeAqtiFyTg92mZO5Y2XoA';\n\nclass App extends Component {\n  state = {\n    pizzaPlaces: pizzaImport,\n    venues: pizzaImport,\n    markers: [],\n    error: false\n  }\n\n  componentDidMount() {\n    this.initializeMap()\n\n  }\n\n  // Initialize Mapbox Map and handle errors loading the map api\n  initializeMap = () => {\n    map = new mapboxgl.Map({\n        container: 'map',\n        style: 'mapbox://styles/mapbox/streets-v9', \n        center: [-76.62, 39.28], \n        zoom: 13 \n    });\n\n    map.on('error', () => {\n      alert(\"Uh oh! Mapbox was unable to load. Please retry or check your connection.\")\n    })\n\n    return map;\n  }\n\n  // Create popups and call createMarker to create the marker with the associated popup\n  initializeMarkers = (venues) => {\n    const allMarkers = venues.map(venue => {\n      popup = new mapboxgl.Popup({ offset: 25 })\n      venueId = venue.name.replace(/\\s+/g, '');\n      latLng = [venue.location.lng, venue.location.lat];\n      popup.setHTML(\n        `<div tabindex=\"0\"> <p class=\"popup-text\">${venue.name}</p> \n        <p class=\"popup-text\">${venue.location.formattedAddress[0]}</p> \n        <p class=\"popup-text\">${venue.location.formattedAddress[1]}</p></div>`\n        );\n      this.createMarker(latLng, popup, venueId) \n    })\n  }\n\n  // Create Mapbox markers and add correct event listeners\n  createMarker = (latLng, popup, venueId) => {\n    marker = new mapboxgl.Marker({color: '#40798C'})\n    .setLngLat(latLng)\n    .setPopup(popup)\n    .addTo(map)\n    marker.getElement().classList.add(`${venueId}`)\n    marker.getElement().data = venueId;\n    marker.getElement().addEventListener('focus', () => {\n      marker.togglePopup()\n    })\n    marker.getElement().addEventListener('click', this.animateMarker)\n    marker.getElement().setAttribute('tabindex', 0)\n  }\n  \n  // Animate the markers on click\n  animateMarker = (event) => {\n      if(selectedMarker[0] !== event.currentTarget) {\n        selectedMarker.push(event.currentTarget)\n        selectedMarker[0].classList.remove(\"animateMarker\")\n        selectedMarker[0].classList.remove(\"changeColor\")\n        selectedMarker.splice(0, 1, event.currentTarget)\n        event.currentTarget.classList.toggle(\"animateMarker\")\n        event.currentTarget.classList.toggle(\"changeColor\")\n        // event.stopPropagation()\n      } else {\n        event.currentTarget.classList.toggle(\"animateMarker\")\n        event.currentTarget.classList.toggle(\"changeColor\")\n      }\n    }\n    \n    openPopup = (marker) => {\n      marker.togglePopup()\n    }\n  \n  render() {\n    return (\n      <div className=\"app\" id=\"map\">\n        <Sidebar \n        venues={this.state.venues}\n        error={this.state.error}\n        initializeMarkers={this.initializeMarkers}\n        updateMarkers={this.updateMarkers}\n        clearMarkers={this.clearMarkers}\n        markers={this.state.markers}\n        />\n        \n        <Map \n        initializeMap={this.initializeMap}\n        initializeMarkers={this.initializeMarkers}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport '../App.css';\n\n\nclass Map extends Component {\n    \n    render() {\n    return <div ref={el => this.mapContainer = el} role=\"application\"/>;\n  }\n}\n\nexport default Map;","import React, { Component } from 'react';\nimport escapeRegExp from 'escape-string-regexp';\nimport sortBy from 'sort-by';\nimport '../App.css';\n\n\nlet clientId = 'ZSPTQF2ZF05OMT3EYKCTCVOTLZ0SOS5CK55HEORQU0VG55NZ',\nclientSecret = 'DQJT5J4TFN3MBG2FK1SPDUVZL5IPM2RMOWETL3FQWGGXJQLH',\napi = 'https://api.foursquare.com/v2';\n\n\nclass Sidebar extends Component {\n    \n    state = {\n        query: '',\n        results: [],\n        venues: [],\n        markers: [],\n        error: false\n    }\n\n    componentDidMount() {\n        this.setState({venues: this.props.venues}, () => {\n        this.getVenueDetails()\n        })\n    }\n    \n    // Listen for change in search bar query\n    newSearch = (query) => {\n        this.setState({ query})\n    }\n\n    // API call to Foursquare\n    getVenueDetails = () => {\n    this.state.venues.venues.map(venue => {\n      let venueId = venue.id;\n       fetch(`${api}/venues/${venueId}?client_id=${clientId}&client_secret=${clientSecret}&v=20180323`)\n        .then(res => res.json())\n        .then((data) => {\n            // Assign a placeholder image when the returned venue does not contain an image\n          if(data.meta.code === 200){\n            if(!data.response.venue.bestPhoto) {\n              data.response.venue.bestPhoto = {prefix: \"https://www.kiabrisa.com.br/wp-content/uploads/revslider/home5/placeholder-1200x500-\", suffix: \".png\", width: 100, height: 100}\n            }\n            // Set the venues state to each venue as the details come in and initialize the corresponding markers\n          this.setState({venues: [...this.state.venues, data.response.venue], results: [...this.state.results, data.response.venue]}, () => {\n                    this.props.initializeMarkers([data.response.venue])\n            return;\n          })\n        } else {\n          this.setState({error: true})\n        }\n        }).catch(err => {\n          if(err){\n            console.log(\"error:\", err);\n            this.setState({error: true})\n          }\n        })\n    })\n  }\n\n    render() {\n\n    const { query, results, markers, error } = this.state\n    \n    let showVenues, showMarkers;\n\n    // Filter venue list based on query input\n    if (query) {\n      const venueMatch = new RegExp(escapeRegExp(query), 'i')\n      showVenues = results.filter((venue) => venueMatch.test(venue.name))\n\n      // Filter markers based on query input\n      const markerMatch = new RegExp(escapeRegExp(query), 'i')\n      showMarkers = markers.filter((marker) => {\n        if(!markerMatch.test(marker._element.data)) {\n            marker._element.classList.add('display-none')\n        } else {\n            marker._element.classList.remove('display-none')\n        }\n        return showMarkers;\n    })\n\n    } else {\n      showVenues = results\n      showMarkers = markers\n      this.state.markers.forEach((marker) => {\n        marker._element.classList.remove('display-none')\n      })\n    }\n    \n    showVenues.sort(sortBy('name'))\n    \n    return(\n        <aside className=\"sidebar-container\">\n            <input \n            type=\"text\" \n            id=\"search\" \n            placeholder=\"Search by name\" \n            className=\"sidebar-search\"\n            aria-label=\"search\"\n            value={query}\n            onChange={(event) => this.newSearch(event.target.value)}\n            />\n            {!error && showVenues.map(venue => (\n            <section className=\"venue-box\" key={venue.id}>\n                <h2 className=\"venue-name\" role=\"heading\" tabIndex=\"0\">{venue.name}</h2>\n                <section className=\"venue-sub-box\">\n                    <img className=\"venue-img\"  alt={venue.name} src={venue.bestPhoto.prefix + venue.bestPhoto.width + \"x\" + venue.bestPhoto.height + venue.bestPhoto.suffix}/>\n                    <ul className=\"venue-list\">\n                        <li className=\"venue-text\">{venue.categories[0].name}</li>\n                        <li className=\"venue-text\">{venue.location.formattedAddress[0]}</li>\n                        <li className=\"venue-text\">{venue.location.formattedAddress[1]}</li>\n                    </ul>\n                </section>\n            </section>\n            )\n            )}\n            {error && \n                    <p className=\"error-text\">Oh no! There was an error getting the requested data from FourSquare. Please try again or report this error via the <a href=\"https://github.com/ashleighc207/react-neighborhood-map/issues\">Github&nbsp;Repo.</a>\n                </p>\n            }\n        </aside>\n    ) \n  }\n}\n\nexport default Sidebar;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}